package main

import (
	"fmt"
	"sync"
)

// Дана последовательность чисел: 2,4,6,8,10. Найти сумму их
// квадратов(22+32+42….) с использованием конкурентных вычислений.

var array = [5]int{2, 4, 6, 8, 10}
var sum int

func main() {
	// Инициализируем WaitGroup для ожидания завершения всех потоков
	wg := sync.WaitGroup{}
	// Создаем мьютекс для блокировки доступа к общей переменной
	mutex := sync.Mutex{}
	for _, value := range array {
		// Инкремент при каждом создании горутины
		wg.Add(1)
		go func(value int) {
			// Отложенный декремент при завершении работы горутины
			defer wg.Done()
			// Блокируем доступ к переменной sum другим горутинам (они находятся в ожидании)
			mutex.Lock()
			sum += value * value
			fmt.Println(value*value, sum)
			// Разблокировка доступа после работы с переменной
			mutex.Unlock()
		}(value)
	}
	// Блокировка выполнения, пока счётчик не будет равен 0
	wg.Wait()
	fmt.Println(sum)

}
